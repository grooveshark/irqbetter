#!/usr/bin/ruby

PROC_COUNT=`cat /proc/cpuinfo| grep '^processor' | wc -l`.to_i

class Interrupt
  attr_reader :type, :name, :affinity, :id, :hint

  def initialize(id, name, type, affinity, hint)
    @id = id
    @name = name
    @type = type
    @affinity = affinity
    @hint = hint
  end

  # Returns string format with smp_affinity if argument is "smp"
  # or affinity_hint if "hint"
  def to_s(type = "smp")
    case type
    when "smp"
      "#{@id}:\t#{@affinity.to_binary}\t#{@type}\t#{@name}"
    when "hint"
      "#{@id}:\t#{@hint.to_binary}\t#{@type}\t#{@name}"
    else
      raise(ArgumentError, 'Argument must be "smp" or "hint"')
    end
  end
end

class Interrupts
  def initialize
    @interrupts = {}
    @name_to_id = {}

    proc_interrupts = File.read("/proc/interrupts")
    # Used [ \t]* instead of \s before the name because \s will match newlines and sometimes the name doesn't
    # exist causing the name to get the whole next line
    proc_interrupts.scan(/^\s*(\d+):(\s+\d+){#{PROC_COUNT}}\s+([^\s]+)[ \t]*(.*)$/) do |id, blah, type, name|
      # Just to be safe
      type.strip! && name.strip!
      id = id.to_i
      hint = nil
      begin
        hint = Hint.new(id)
      rescue
      end
      @interrupts[id] = Interrupt.new(id, name, type, Affinity.new(id), hint)
      @name_to_id[name] = @name_to_id.has_key?(name) ? false : id
    end
  end


  def to_s(affinity = "smp")
    str = ""
    # The order of the hash is not consistent in Ruby 1.8.7 so sort
    @interrupts.keys.sort.each do |id|
      str += @interrupts[id].to_s(affinity) + "\n"
    end
    return str
  end

  def print(type = "smp")
    str = "CPU:\t"
    (PROC_COUNT-1).downto(0).each do |cpu|
      str += sprintf("%2s", cpu)
    end
    str += "\n"
    # The order of the hash is not consistent in Ruby 1.8.7 so sort
    @interrupts.keys.sort.each do |id|
      irq = @interrupts[id]
      case type
      when "smp"
        affinity = irq.affinity.to_binary.gsub(/0/, ' .').gsub(/1/, ' 1')
      when "hint"
        affinity = irq.hint.to_binary.gsub(/0/, ' .').gsub(/1/, ' 1')
      else
        raise(ArgumentError, 'Argument must be "smp" or "hint"')
      end
      str += "#{irq.id}:\t#{affinity}\t#{irq.type}\t#{irq.name}\n"
    end
    printf(str)
  end

  # If key is a int, key is treated as an id.  Otherwise, key is treated as a name.
  # If the name is not unique, returns false
  def [](key)
    return @interrupts[key] if key.is_a? Integer

    if @name_to_id.has_key?(key) && @name_to_id[key]
      return @interrupts[@name_to_id[key]]
    end

    return @name_to_id[key]
  end

  def []=(key, value)
    raise(ArgumentError, "Must be a type Interrupt") unless value.is_a? Interrupt

    if key.is_a? Integer
      raise(ArgumentError, "Interrupt ID does not exist") unless @interrupts.has_key?(key)
      @interrupts[key] = value
    end

    raise(ArgumentError, "No interrupt with name #{key}") unless @name_to_id.has_key?(key)
    raise(ArgumentError, "More than one interrupt with name #{key}") unless @name_to_id[key]

    @interrupts[@name_to_id[key]] = value
  end

  def names
    @name_to_id.keys
  end

  # Returns an array of Interrupt which block returns true value
  def map(&block)
    raise(ArgumentError, "No block was given") unless block_given?
    raise(ArgumentError, "Block must have one or four arguments") unless block.arity.eql?(1)

    filtered = []
    @interrupts.each do |id, interrupt|
      filtered << interrupt if block.call(interrupt)
    end
    return filtered
  end

  def save
    @interrupts.each {|id, irq| irq.affinity.save}
  end
end

class Affinity
  attr_reader :id, :mask, :format

  def initialize(id)
    if not File.file?("/proc/irq/#{id}/smp_affinity")
      raise "#{id} is not a valid interrupt"
    end

    @id = id

    smp_affinity = File.read("/proc/irq/#{id}/smp_affinity")
    if not smp_affinity =~ /^[0-9a-fA-F,]+$/
      raise "Failed to get affinity for interrupt #{id}"
    end
    @format = smp_affinity
    proc_mask = ("1" * PROC_COUNT).to_i(2)
    @mask = smp_affinity.gsub(/,/, "").to_i(16) & proc_mask
  end

  # Prepend zeros to str for up to length len
  def zero_pad(str, len)
    pad_length = len - str.length
    pad_length = 0 if pad_length < 0
    return "0" * pad_length + str
  end

  def to_binary
    str = @mask.to_s(2)
    self.zero_pad(str, PROC_COUNT)
  end

  def to_hex
    str = @mask.to_s(16)
    self.zero_pad(str, (PROC_COUNT / 4.0).ceil)
  end

  # Returns hex mask in the format that the kernel first gave it to us in.  It seems to somewhat
  # inconsistent expecially across different kernel version, so instead of asking why I just
  # emulate whatever the kernel first gave me.
  def to_proc_format
    str = @mask.to_s(16)
    mask = self.zero_pad(str, @format.gsub(/,/, "").length)
    (0..@format.length).each do |i|
      mask.insert(i, ",") if @format[i].eql?(",")
    end
    return mask
  end

  # Sets affinity to the corect mask for array of processors
  def set_procs(processors)
    @mask = self.class.create_mask(processors)
  end

  # Sets affinity to processor, wraps around if processor number too large
  def set_proc_wrap(processor)
    processor = (processor < PROC_COUNT) ? processor.to_i : (processor % PROC_COUNT)
    @mask = self.class.create_mask([processor])
  end

  def save
    File.open("/proc/irq/#{@id}/smp_affinity", 'w') {|f| f.write(self.to_proc_format)}
  end

  def self.create_mask(processors)
    mask = 0
    processors.each do |processor|
      if processor >= PROC_COUNT
        raise "Processor #{processor} does not exists"
      end

      mask = mask | (1 << processor)
    end
    return mask
  end
end


class Hint < Affinity
  def initialize(id)
    if not File.exist?("/proc/irq/#{id}")
      raise "#{id} is not a valid interrupt"
    end

    @id = id

    @mask = 0
    if File.file?("/proc/irq/#{id}/affinity_hint")
      hint = File.read("/proc/irq/#{id}/affinity_hint")
      if not hint =~ /^[0-9a-fA-F,]+$/
        raise "Failed to get affinity hint for interrupt #{id}"
      end
      @format = hint
      proc_mask = ("1" * PROC_COUNT).to_i(2)
      @mask = hint.gsub(/,/, "").to_i(16) & proc_mask
    end
  end
end

def irq_sort(irqs)
  irqs.sort do |a, b|
    a.gsub(/^[A-Za-z0-9]+.*?(\d+).*/, '\1').to_i <=> b.gsub(/^[A-Za-z0-9]+.*?(\d+).*/, '\1').to_i
  end
end

def print_header(header, width = 50)
  # Subtract two for the spaces on either side
  pad = (width - header.length - 2) / 2.0
  if pad > 1
    # Padding
    left = "-" * pad.ceil
    right = "-" * pad.floor
    puts left + " #{header} " + right
  else
    puts "- #{header} -"
  end
end

def print_help
    puts """Usage:
  #{__FILE__} [OPTIONS] INTERFACE [INTERFACE]...

Description:
  This script attempts to bind each queue interrupt of a multi-queue
  NICs each to a different core.  If the NIC has seperate tx and rx
  queues, it will bind each set to the same core, ie:
  tx0|rx0 --> cpu0, tx1|rx1 --> cpu1.

Options:
  -t, --test    show what the affinities of each interrupt will be
                before and after running the script without actually
                changing them
  -p, --print   show the affinities found in /proc/irq/*/smp_affinity
      --hint    show the hints found in /proc/irq/*/affinity_hint
  -h, --help    show this help"""
end

# Various option flags and array a device array to store all the INTERFACE arguments in
test_flag = false
print_flag = false
hint_flag = false
devices = []

# Parse argument
ARGV.each do |arg|
  case arg
  when "-h", "--help"
    print_help
    exit
  when "-t", "--test"
    test_flag = true
  when "-p", "--print"
    print_flag = true
  when "--hint"
    hint_flag = true
  when /^-/
    puts "ERROR: unrecognized option #{arg}\n\n"
    print_help
    exit 1
  else
    devices << arg
  end
end

# Print out warning if irqbalance is running
if Kernel.system("ps ax | grep -v grep | grep -q irqbalance")
  puts "WARNING: irqbalance is running and will likely override this script's affinitization.\n\n"
end

interrupts = Interrupts.new

if hint_flag
  print_header("Affinity Hints")
  interrupts.print("hint")
  exit
end

print_header("Current Affinities")
interrupts.print

exit if print_flag

if devices.length == 0
  puts "\nERROR: must specify atleast one INTERFACE"
  exit 1
end

# Counter to keep track which core to assign the next interrupt to
counter = 0

# Store any devices that no interrupts where found for
faild_devices = []
# Spread all the interrupts
devices.each do |dev|
  found_irq_flag = false
  # Find all TxRx queues
  txrx = interrupts.names.select {|n| n =~ /^#{dev}-TxRx-\d+$|^#{dev}:v\d+-TxRx$|^#{dev}-\d+$/i}
  found_irq_flag = true if txrx.length > 0
  irq_sort(txrx).each do |n|
    puts n
    interrupts[n].affinity.set_proc_wrap(counter)
    counter += 1
  end
  # Save counter so that we can start at the same core with the Tx's
  tx_counter = counter
  # Find all Rx queues
  rx = interrupts.names.select {|n| n =~ /#{dev}-Rx-\d+|#{dev}:v\d+-Rx/i}
  found_irq_flag = true if rx.length > 0
  irq_sort(rx).each do |n|
    interrupts[n].affinity.set_proc_wrap(counter)
    counter += 1
  end
  # Find all Tx queues
  tx = interrupts.names.select{|n| n =~ /#{dev}-Tx-\d+|#{dev}:v\d+-Tx/i}
  found_irq_flag = true if tx.length > 0
  irq_sort(tx).each do |n|
    interrupts[n].affinity.set_proc_wrap(tx_counter)
    tx_counter += 1
    counter = tx_counter if tx_counter > counter
  end
  faild_devices << dev if not found_irq_flag
end

print_header("Updated Affinities")
interrupts.print
puts

faild_devices.each do |dev|
  puts "WARNING: no interrupts found for interface '#{dev}'"
end

if test_flag
  puts ("NOTE: running in test mode, affinities not modified")
else
  interrupts.save unless test_flag
end
